<?php

/**
 * module idea from http://bitcookie.com/blog/importing-csv-file-drupal-programmatically-using-batch-api
 */

//-------------------------------------------------------------------------------------------|
//  Implementation of hook_menu, this provides a front-end for the importer
//-------------------------------------------------------------------------------------------|
function csvImporter_menu() {
  $items['csvImporter'] = array(
    'title' => 'Import Data from CSV File',
    'description' => 'Import content from a <abbr title="Comma Separated Values">CSV</abbr> file.',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'csvImporter_pagecallback',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function csvImporter_pagecallback() {
  $module_path = drupal_get_path('module', 'csvImporter');

  $form = drupal_get_form('csvImporter_form');

  $output = "<p>This tool will attempt to import CSV data";
  $output .= drupal_render($form);

  return $output;
}

function csvImporter_form() {
  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
  );

  $form['csvfile'] = array(
    '#title' => t('CSV File'),
    '#type' => 'file',
    '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
      );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commence Import'),
      );
  $form['#validate'] = array(
    'csvImporter_validate_fileupload',
    'csvImporter_form_validate',
      );
  return $form;
}

function csvImporter_validate_fileupload(&$form, &$form_state) {
  $destination = '';
  $validators = array(
    'file_validate_extensions' => array('csv'),
  );

  if ($file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE)) {
    $form_state['values']['csvupload'] = $file->destination;
  }
  else {
    form_set_error('csvImporter', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
  }
}

function csvImporter_form_validate(&$form, &$form_state) {
  if (isset($form_state['values']['csvupload'])) {
    if ($handle = fopen($form_state['values']['csvupload'], 'r')) {
      $line_count = 1;
      $first = TRUE;
      if ($line = fgetcsv($handle, 4096)) {

        //-------------------------------------------------------------------------------------------|
        //  This is where you can validate aspects of the file itself, like the number of columns
        //-------------------------------------------------------------------------------------------|
        //  if(count($line) != 3){
        //    form_set_error('csvfile', t('This file has the incorrect number of columns. Expecting 3'));
        //  }
        //-------------------------------------------------------------------------------------------|
        //  End validating aspects of the CSV file
        //-------------------------------------------------------------------------------------------|
      }
      fclose($handle);
    }
    else {
      form_set_error('csvfile', t('Unable to read uploaded file !filepath', array('!filepath' => $form_state['values']['csvupload'])));
    }
  }
}

function csvImporter_form_submit(&$form, &$form_state) {
  $batch = array(
    'title' => t('Importing CSV ...'),
    'operations' => array(),
    'init_message' => t('Commencing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'csvImporter_import_finished',
      );
  if (isset($form_state['values']['csvupload'])) {
    if ($handle = fopen($form_state['values']['csvupload'], 'r')) {
      $batch['operations'][] = array('_csvImporter_remember_filename', array($form_state['values']['csvupload']));
      $line_count = 1;
      $first = TRUE;
      $line = fgetcsv($handle, 4096);
      while ($line = fgetcsv($handle, 4096)) {
        /**
         * we use base64_encode to ensure we don't overload the batch
         * processor by stuffing complex objects into it
         */
        $batch['operations'][] = array('_csvImporter_import_line', array(array_map('base64_encode', $line)));
      }
      fclose($handle);
    } // we caught this in csvImporter_form_validate()
  } // we caught this in csvImporter_form_validate()
  batch_set($batch);
}

//-------------------------------------------------------------------------------------------|
//  Batch API helpers
//-------------------------------------------------------------------------------------------|
function csvImporter_import_finished($success, $results, $operations) {
  if (!empty($results['failed_rows'])) {
    $dir = file_directory_path() . '/csvImporter/';
    if (file_check_directory($dir, FILE_CREATE_DIRECTORY)) {
      $csv_filename = 'failed_rows-' . basename($results['uploaded_filename']); // we validated extension on upload
      $csv_filepath = $dir . '/' . $csv_filename;
      $targs = array(
        '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
        '%csv_filename' => $csv_filename,
        '%csv_filepath' => $csv_filepath,
          );
      if ($handle = fopen($csv_filepath, 'w+')) {
        foreach ($results['failed_rows'] as $failed_row) {
          fputcsv($handle, $failed_row);
        }
        fclose($handle);
        drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
      }
    }
    else {
      drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
    }
  }
  return t('The CSV import has completed.');
}

function _csvImporter_remember_filename($filename, &$context) {
  $context['results']['uploaded_filename'] = $filename;
}

//-------------------------------------------------------------------------------------------|
//  The important part, this is where we "do something" with an individual CSV line
//-------------------------------------------------------------------------------------------|

function _csvImporter_import_line($line, $session_nid, &$context) {

  $context['results']['rows_imported'] ++;
  $line = $cleaned_line = array_map('base64_decode', $line);


  //-------------------------------------------------------------------------------------------|
  //  Give feedback to the importer about which operation we're preforming
  //-------------------------------------------------------------------------------------------|
  //Show the row count by default
  $context['message'] = t('Importing row !c', array('!c' => $context['results']['rows_imported']));

  //Or, Provide some feedback about the row currently being processed
  $context['message'] = t('Importing %title', array('%title' => $line[0]));
  //-------------------------------------------------------------------------------------------|
  //  End giving feedback to the importer
  //-------------------------------------------------------------------------------------------|
  //-------------------------------------------------------------------------------------------|
  //  This is where you would convert the line of the CSV file into a new object, be it a node, user, etc.
  //-------------------------------------------------------------------------------------------|
  
  _import_line_to_node($line);

  drupal_set_message("Parsed line {$line[0]}");

  //-------------------------------------------------------------------------------------------|
  //  End converting the line to a drupal object
  //-------------------------------------------------------------------------------------------|
  //-------------------------------------------------------------------------------------------|
  //  You can capture and report on failed lines by doing something like this
  //-------------------------------------------------------------------------------------------|
  if ($line[1] == 'ROW' && $line[2] == 'FAILS') {
    $context['results']['failed_rows'][] = $line;
  }
  //-------------------------------------------------------------------------------------------|
  //  End capturing and reporting on failed lines
  //-------------------------------------------------------------------------------------------|
}

//-------------------------------------------------------------------------------------------|
//  End converting an individual line of the CSV into something new
//-------------------------------------------------------------------------------------------|

function _import_line_to_node($line) {
  $doc_no = $line[0];
  $doc_date = $line[1];
  $doc_title = $line[2];
  $doc_link = $line[3];
  $i = 4;
  $attach = array();
  while (isset($line[$i])) {
    $attach[] = array('attach_title' => $line[$i], 'attach_link' => $line[$i + 1]);
    $i = $i + 2;
  }
  
  if ($doc_no == 'T2-318') {
    if (strlen($doc_link) > 0) {
      $doc = system_retrieve_file($doc_link, NULL, TRUE, FILE_EXISTS_REPLACE);
      //$file = _drupal_add_existing_file($doc);
//      
      //$doc = file_get_contents($doc_link);
      //$file = file_save_data($doc, 'public://druplicon.png', FILE_EXISTS_REPLACE);
    }

    $node = new stdClass;
    $node->type = 'ta';
    $node->language = LANGUAGE_NONE;
    
    node_object_prepare($node);
    
    $node->title = $doc_no;        
    
    $node->body[LANGUAGE_NONE][0]['value'] = $doc_title;
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';

    if (isset($doc)) {
      $file = (array)$doc;
      $file['display'] = 1;
      $node->field_failas[LANGUAGE_NONE]['0'] = $file;
    }
    node_save($node);
  }
}



//function _drupal_add_existing_file($file_drupal_path, $uid = 1, $status = FILE_STATUS_PERMANENT) {
//  $files = file_load_multiple(array(), array('uri' => $file_drupal_path));
//  $file = reset($files);
//
//  if (!$file) {
//    $file = (object) array(
//          'filename' => basename($file_drupal_path),
//          'filepath' => $file_drupal_path,
//          'filemime' => file_get_mimetype($file_drupal_path),
//          'filesize' => filesize($file_drupal_path),
//          'uid' => $uid,
//          'status' => $status,
//          'timestamp' => time(),
//          'uri' => $file_drupal_path,
//    );
//    drupal_write_record('file_managed', $file);
//  }
//  return $file;
//}
